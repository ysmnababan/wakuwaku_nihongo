// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	Answer   *answer
	Customer *customer
	JlptBook *jlptBook
	Question *question
	Quiz     *quiz
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Answer = &Q.Answer
	Customer = &Q.Customer
	JlptBook = &Q.JlptBook
	Question = &Q.Question
	Quiz = &Q.Quiz
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		Answer:   newAnswer(db, opts...),
		Customer: newCustomer(db, opts...),
		JlptBook: newJlptBook(db, opts...),
		Question: newQuestion(db, opts...),
		Quiz:     newQuiz(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Answer   answer
	Customer customer
	JlptBook jlptBook
	Question question
	Quiz     quiz
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Answer:   q.Answer.clone(db),
		Customer: q.Customer.clone(db),
		JlptBook: q.JlptBook.clone(db),
		Question: q.Question.clone(db),
		Quiz:     q.Quiz.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Answer:   q.Answer.replaceDB(db),
		Customer: q.Customer.replaceDB(db),
		JlptBook: q.JlptBook.replaceDB(db),
		Question: q.Question.replaceDB(db),
		Quiz:     q.Quiz.replaceDB(db),
	}
}

type queryCtx struct {
	Answer   IAnswerDo
	Customer ICustomerDo
	JlptBook IJlptBookDo
	Question IQuestionDo
	Quiz     IQuizDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Answer:   q.Answer.WithContext(ctx),
		Customer: q.Customer.WithContext(ctx),
		JlptBook: q.JlptBook.WithContext(ctx),
		Question: q.Question.WithContext(ctx),
		Quiz:     q.Quiz.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
