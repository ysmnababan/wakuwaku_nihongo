// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wakuwaku_nihongo/internals/model"
)

func newAnswer(db *gorm.DB, opts ...gen.DOOption) answer {
	_answer := answer{}

	_answer.answerDo.UseDB(db, opts...)
	_answer.answerDo.UseModel(&model.Answer{})

	tableName := _answer.answerDo.TableName()
	_answer.ALL = field.NewAsterisk(tableName)
	_answer.AnswerID = field.NewString(tableName, "answer_id")
	_answer.CreatedAt = field.NewInt64(tableName, "created_at")
	_answer.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_answer.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_answer.CreatedBy = field.NewString(tableName, "created_by")
	_answer.ModifiedBy = field.NewString(tableName, "modified_by")
	_answer.DeletedBy = field.NewString(tableName, "deleted_by")
	_answer.QuestionID = field.NewString(tableName, "question_id")
	_answer.AnswerText = field.NewString(tableName, "answer_text")
	_answer.IsCorrect = field.NewBool(tableName, "is_correct")
	_answer.Question = answerBelongsToQuestion{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Question", "model.Question"),
		Quiz: struct {
			field.RelationField
			Questions struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Question.Quiz", "model.Quiz"),
			Questions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Question.Quiz.Questions", "model.Question"),
			},
		},
		Answers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Question.Answers", "model.Answer"),
		},
	}

	_answer.fillFieldMap()

	return _answer
}

type answer struct {
	answerDo

	ALL        field.Asterisk
	AnswerID   field.String
	CreatedAt  field.Int64
	ModifiedAt field.Int64
	DeletedAt  field.Int64
	CreatedBy  field.String
	ModifiedBy field.String
	DeletedBy  field.String
	QuestionID field.String
	AnswerText field.String
	IsCorrect  field.Bool
	Question   answerBelongsToQuestion

	fieldMap map[string]field.Expr
}

func (a answer) Table(newTableName string) *answer {
	a.answerDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a answer) As(alias string) *answer {
	a.answerDo.DO = *(a.answerDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *answer) updateTableName(table string) *answer {
	a.ALL = field.NewAsterisk(table)
	a.AnswerID = field.NewString(table, "answer_id")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.ModifiedAt = field.NewInt64(table, "modified_at")
	a.DeletedAt = field.NewInt64(table, "deleted_at")
	a.CreatedBy = field.NewString(table, "created_by")
	a.ModifiedBy = field.NewString(table, "modified_by")
	a.DeletedBy = field.NewString(table, "deleted_by")
	a.QuestionID = field.NewString(table, "question_id")
	a.AnswerText = field.NewString(table, "answer_text")
	a.IsCorrect = field.NewBool(table, "is_correct")

	a.fillFieldMap()

	return a
}

func (a *answer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *answer) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["answer_id"] = a.AnswerID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["modified_at"] = a.ModifiedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["modified_by"] = a.ModifiedBy
	a.fieldMap["deleted_by"] = a.DeletedBy
	a.fieldMap["question_id"] = a.QuestionID
	a.fieldMap["answer_text"] = a.AnswerText
	a.fieldMap["is_correct"] = a.IsCorrect

}

func (a answer) clone(db *gorm.DB) answer {
	a.answerDo.ReplaceConnPool(db.Statement.ConnPool)
	a.Question.db = db.Session(&gorm.Session{Initialized: true})
	a.Question.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a answer) replaceDB(db *gorm.DB) answer {
	a.answerDo.ReplaceDB(db)
	a.Question.db = db.Session(&gorm.Session{})
	return a
}

type answerBelongsToQuestion struct {
	db *gorm.DB

	field.RelationField

	Quiz struct {
		field.RelationField
		Questions struct {
			field.RelationField
		}
	}
	Answers struct {
		field.RelationField
	}
}

func (a answerBelongsToQuestion) Where(conds ...field.Expr) *answerBelongsToQuestion {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a answerBelongsToQuestion) WithContext(ctx context.Context) *answerBelongsToQuestion {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a answerBelongsToQuestion) Session(session *gorm.Session) *answerBelongsToQuestion {
	a.db = a.db.Session(session)
	return &a
}

func (a answerBelongsToQuestion) Model(m *model.Answer) *answerBelongsToQuestionTx {
	return &answerBelongsToQuestionTx{a.db.Model(m).Association(a.Name())}
}

func (a answerBelongsToQuestion) Unscoped() *answerBelongsToQuestion {
	a.db = a.db.Unscoped()
	return &a
}

type answerBelongsToQuestionTx struct{ tx *gorm.Association }

func (a answerBelongsToQuestionTx) Find() (result *model.Question, err error) {
	return result, a.tx.Find(&result)
}

func (a answerBelongsToQuestionTx) Append(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a answerBelongsToQuestionTx) Replace(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a answerBelongsToQuestionTx) Delete(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a answerBelongsToQuestionTx) Clear() error {
	return a.tx.Clear()
}

func (a answerBelongsToQuestionTx) Count() int64 {
	return a.tx.Count()
}

func (a answerBelongsToQuestionTx) Unscoped() *answerBelongsToQuestionTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type answerDo struct{ gen.DO }

type IAnswerDo interface {
	gen.SubQuery
	Debug() IAnswerDo
	WithContext(ctx context.Context) IAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnswerDo
	WriteDB() IAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnswerDo
	Not(conds ...gen.Condition) IAnswerDo
	Or(conds ...gen.Condition) IAnswerDo
	Select(conds ...field.Expr) IAnswerDo
	Where(conds ...gen.Condition) IAnswerDo
	Order(conds ...field.Expr) IAnswerDo
	Distinct(cols ...field.Expr) IAnswerDo
	Omit(cols ...field.Expr) IAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnswerDo
	Group(cols ...field.Expr) IAnswerDo
	Having(conds ...gen.Condition) IAnswerDo
	Limit(limit int) IAnswerDo
	Offset(offset int) IAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnswerDo
	Unscoped() IAnswerDo
	Create(values ...*model.Answer) error
	CreateInBatches(values []*model.Answer, batchSize int) error
	Save(values ...*model.Answer) error
	First() (*model.Answer, error)
	Take() (*model.Answer, error)
	Last() (*model.Answer, error)
	Find() ([]*model.Answer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Answer, err error)
	FindInBatches(result *[]*model.Answer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Answer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnswerDo
	Assign(attrs ...field.AssignExpr) IAnswerDo
	Joins(fields ...field.RelationField) IAnswerDo
	Preload(fields ...field.RelationField) IAnswerDo
	FirstOrInit() (*model.Answer, error)
	FirstOrCreate() (*model.Answer, error)
	FindByPage(offset int, limit int) (result []*model.Answer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a answerDo) Debug() IAnswerDo {
	return a.withDO(a.DO.Debug())
}

func (a answerDo) WithContext(ctx context.Context) IAnswerDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a answerDo) ReadDB() IAnswerDo {
	return a.Clauses(dbresolver.Read)
}

func (a answerDo) WriteDB() IAnswerDo {
	return a.Clauses(dbresolver.Write)
}

func (a answerDo) Session(config *gorm.Session) IAnswerDo {
	return a.withDO(a.DO.Session(config))
}

func (a answerDo) Clauses(conds ...clause.Expression) IAnswerDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a answerDo) Returning(value interface{}, columns ...string) IAnswerDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a answerDo) Not(conds ...gen.Condition) IAnswerDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a answerDo) Or(conds ...gen.Condition) IAnswerDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a answerDo) Select(conds ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a answerDo) Where(conds ...gen.Condition) IAnswerDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a answerDo) Order(conds ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a answerDo) Distinct(cols ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a answerDo) Omit(cols ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a answerDo) Join(table schema.Tabler, on ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a answerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a answerDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a answerDo) Group(cols ...field.Expr) IAnswerDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a answerDo) Having(conds ...gen.Condition) IAnswerDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a answerDo) Limit(limit int) IAnswerDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a answerDo) Offset(offset int) IAnswerDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a answerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnswerDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a answerDo) Unscoped() IAnswerDo {
	return a.withDO(a.DO.Unscoped())
}

func (a answerDo) Create(values ...*model.Answer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a answerDo) CreateInBatches(values []*model.Answer, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a answerDo) Save(values ...*model.Answer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a answerDo) First() (*model.Answer, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) Take() (*model.Answer, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) Last() (*model.Answer, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) Find() ([]*model.Answer, error) {
	result, err := a.DO.Find()
	return result.([]*model.Answer), err
}

func (a answerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Answer, err error) {
	buf := make([]*model.Answer, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a answerDo) FindInBatches(result *[]*model.Answer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a answerDo) Attrs(attrs ...field.AssignExpr) IAnswerDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a answerDo) Assign(attrs ...field.AssignExpr) IAnswerDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a answerDo) Joins(fields ...field.RelationField) IAnswerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a answerDo) Preload(fields ...field.RelationField) IAnswerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a answerDo) FirstOrInit() (*model.Answer, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) FirstOrCreate() (*model.Answer, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) FindByPage(offset int, limit int) (result []*model.Answer, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a answerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a answerDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a answerDo) Delete(models ...*model.Answer) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *answerDo) withDO(do gen.Dao) *answerDo {
	a.DO = *do.(*gen.DO)
	return a
}
