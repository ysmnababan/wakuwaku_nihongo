// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wakuwaku_nihongo/internals/model"
)

func newQuiz(db *gorm.DB, opts ...gen.DOOption) quiz {
	_quiz := quiz{}

	_quiz.quizDo.UseDB(db, opts...)
	_quiz.quizDo.UseModel(&model.Quiz{})

	tableName := _quiz.quizDo.TableName()
	_quiz.ALL = field.NewAsterisk(tableName)
	_quiz.QuizID = field.NewString(tableName, "quiz_id")
	_quiz.CreatedAt = field.NewInt64(tableName, "created_at")
	_quiz.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_quiz.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_quiz.CreatedBy = field.NewString(tableName, "created_by")
	_quiz.ModifiedBy = field.NewString(tableName, "modified_by")
	_quiz.DeletedBy = field.NewString(tableName, "deleted_by")
	_quiz.Title = field.NewString(tableName, "title")
	_quiz.Description = field.NewString(tableName, "description")
	_quiz.Questions = quizHasManyQuestions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Questions", "model.Question"),
	}

	_quiz.fillFieldMap()

	return _quiz
}

type quiz struct {
	quizDo

	ALL         field.Asterisk
	QuizID      field.String
	CreatedAt   field.Int64
	ModifiedAt  field.Int64
	DeletedAt   field.Int64
	CreatedBy   field.String
	ModifiedBy  field.String
	DeletedBy   field.String
	Title       field.String
	Description field.String
	Questions   quizHasManyQuestions

	fieldMap map[string]field.Expr
}

func (q quiz) Table(newTableName string) *quiz {
	q.quizDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quiz) As(alias string) *quiz {
	q.quizDo.DO = *(q.quizDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quiz) updateTableName(table string) *quiz {
	q.ALL = field.NewAsterisk(table)
	q.QuizID = field.NewString(table, "quiz_id")
	q.CreatedAt = field.NewInt64(table, "created_at")
	q.ModifiedAt = field.NewInt64(table, "modified_at")
	q.DeletedAt = field.NewInt64(table, "deleted_at")
	q.CreatedBy = field.NewString(table, "created_by")
	q.ModifiedBy = field.NewString(table, "modified_by")
	q.DeletedBy = field.NewString(table, "deleted_by")
	q.Title = field.NewString(table, "title")
	q.Description = field.NewString(table, "description")

	q.fillFieldMap()

	return q
}

func (q *quiz) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quiz) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["quiz_id"] = q.QuizID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["modified_at"] = q.ModifiedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["created_by"] = q.CreatedBy
	q.fieldMap["modified_by"] = q.ModifiedBy
	q.fieldMap["deleted_by"] = q.DeletedBy
	q.fieldMap["title"] = q.Title
	q.fieldMap["description"] = q.Description

}

func (q quiz) clone(db *gorm.DB) quiz {
	q.quizDo.ReplaceConnPool(db.Statement.ConnPool)
	q.Questions.db = db.Session(&gorm.Session{Initialized: true})
	q.Questions.db.Statement.ConnPool = db.Statement.ConnPool
	return q
}

func (q quiz) replaceDB(db *gorm.DB) quiz {
	q.quizDo.ReplaceDB(db)
	q.Questions.db = db.Session(&gorm.Session{})
	return q
}

type quizHasManyQuestions struct {
	db *gorm.DB

	field.RelationField
}

func (a quizHasManyQuestions) Where(conds ...field.Expr) *quizHasManyQuestions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a quizHasManyQuestions) WithContext(ctx context.Context) *quizHasManyQuestions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a quizHasManyQuestions) Session(session *gorm.Session) *quizHasManyQuestions {
	a.db = a.db.Session(session)
	return &a
}

func (a quizHasManyQuestions) Model(m *model.Quiz) *quizHasManyQuestionsTx {
	return &quizHasManyQuestionsTx{a.db.Model(m).Association(a.Name())}
}

func (a quizHasManyQuestions) Unscoped() *quizHasManyQuestions {
	a.db = a.db.Unscoped()
	return &a
}

type quizHasManyQuestionsTx struct{ tx *gorm.Association }

func (a quizHasManyQuestionsTx) Find() (result []*model.Question, err error) {
	return result, a.tx.Find(&result)
}

func (a quizHasManyQuestionsTx) Append(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a quizHasManyQuestionsTx) Replace(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a quizHasManyQuestionsTx) Delete(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a quizHasManyQuestionsTx) Clear() error {
	return a.tx.Clear()
}

func (a quizHasManyQuestionsTx) Count() int64 {
	return a.tx.Count()
}

func (a quizHasManyQuestionsTx) Unscoped() *quizHasManyQuestionsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type quizDo struct{ gen.DO }

type IQuizDo interface {
	gen.SubQuery
	Debug() IQuizDo
	WithContext(ctx context.Context) IQuizDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuizDo
	WriteDB() IQuizDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuizDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuizDo
	Not(conds ...gen.Condition) IQuizDo
	Or(conds ...gen.Condition) IQuizDo
	Select(conds ...field.Expr) IQuizDo
	Where(conds ...gen.Condition) IQuizDo
	Order(conds ...field.Expr) IQuizDo
	Distinct(cols ...field.Expr) IQuizDo
	Omit(cols ...field.Expr) IQuizDo
	Join(table schema.Tabler, on ...field.Expr) IQuizDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuizDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuizDo
	Group(cols ...field.Expr) IQuizDo
	Having(conds ...gen.Condition) IQuizDo
	Limit(limit int) IQuizDo
	Offset(offset int) IQuizDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuizDo
	Unscoped() IQuizDo
	Create(values ...*model.Quiz) error
	CreateInBatches(values []*model.Quiz, batchSize int) error
	Save(values ...*model.Quiz) error
	First() (*model.Quiz, error)
	Take() (*model.Quiz, error)
	Last() (*model.Quiz, error)
	Find() ([]*model.Quiz, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quiz, err error)
	FindInBatches(result *[]*model.Quiz, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Quiz) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuizDo
	Assign(attrs ...field.AssignExpr) IQuizDo
	Joins(fields ...field.RelationField) IQuizDo
	Preload(fields ...field.RelationField) IQuizDo
	FirstOrInit() (*model.Quiz, error)
	FirstOrCreate() (*model.Quiz, error)
	FindByPage(offset int, limit int) (result []*model.Quiz, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuizDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quizDo) Debug() IQuizDo {
	return q.withDO(q.DO.Debug())
}

func (q quizDo) WithContext(ctx context.Context) IQuizDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizDo) ReadDB() IQuizDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizDo) WriteDB() IQuizDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizDo) Session(config *gorm.Session) IQuizDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizDo) Clauses(conds ...clause.Expression) IQuizDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizDo) Returning(value interface{}, columns ...string) IQuizDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizDo) Not(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizDo) Or(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizDo) Select(conds ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizDo) Where(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizDo) Order(conds ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizDo) Distinct(cols ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizDo) Omit(cols ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizDo) Join(table schema.Tabler, on ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuizDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuizDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizDo) Group(cols ...field.Expr) IQuizDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizDo) Having(conds ...gen.Condition) IQuizDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizDo) Limit(limit int) IQuizDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizDo) Offset(offset int) IQuizDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuizDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizDo) Unscoped() IQuizDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizDo) Create(values ...*model.Quiz) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizDo) CreateInBatches(values []*model.Quiz, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizDo) Save(values ...*model.Quiz) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizDo) First() (*model.Quiz, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quiz), nil
	}
}

func (q quizDo) Take() (*model.Quiz, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quiz), nil
	}
}

func (q quizDo) Last() (*model.Quiz, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quiz), nil
	}
}

func (q quizDo) Find() ([]*model.Quiz, error) {
	result, err := q.DO.Find()
	return result.([]*model.Quiz), err
}

func (q quizDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quiz, err error) {
	buf := make([]*model.Quiz, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizDo) FindInBatches(result *[]*model.Quiz, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizDo) Attrs(attrs ...field.AssignExpr) IQuizDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizDo) Assign(attrs ...field.AssignExpr) IQuizDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizDo) Joins(fields ...field.RelationField) IQuizDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizDo) Preload(fields ...field.RelationField) IQuizDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizDo) FirstOrInit() (*model.Quiz, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quiz), nil
	}
}

func (q quizDo) FirstOrCreate() (*model.Quiz, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quiz), nil
	}
}

func (q quizDo) FindByPage(offset int, limit int) (result []*model.Quiz, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizDo) Delete(models ...*model.Quiz) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizDo) withDO(do gen.Dao) *quizDo {
	q.DO = *do.(*gen.DO)
	return q
}
