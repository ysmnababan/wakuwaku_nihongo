// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wakuwaku_nihongo/internals/model"
)

func newJlptBook(db *gorm.DB, opts ...gen.DOOption) jlptBook {
	_jlptBook := jlptBook{}

	_jlptBook.jlptBookDo.UseDB(db, opts...)
	_jlptBook.jlptBookDo.UseModel(&model.JlptBook{})

	tableName := _jlptBook.jlptBookDo.TableName()
	_jlptBook.ALL = field.NewAsterisk(tableName)
	_jlptBook.JlptBookID = field.NewString(tableName, "jlpt_book_id")
	_jlptBook.CreatedAt = field.NewInt64(tableName, "created_at")
	_jlptBook.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_jlptBook.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_jlptBook.CreatedBy = field.NewString(tableName, "created_by")
	_jlptBook.ModifiedBy = field.NewString(tableName, "modified_by")
	_jlptBook.DeletedBy = field.NewString(tableName, "deleted_by")
	_jlptBook.Name = field.NewString(tableName, "name")
	_jlptBook.Level = field.NewString(tableName, "level")
	_jlptBook.Category = field.NewString(tableName, "category")
	_jlptBook.Year = field.NewString(tableName, "year")
	_jlptBook.SourceType = field.NewString(tableName, "source_type")
	_jlptBook.URL = field.NewString(tableName, "url")

	_jlptBook.fillFieldMap()

	return _jlptBook
}

type jlptBook struct {
	jlptBookDo

	ALL        field.Asterisk
	JlptBookID field.String
	CreatedAt  field.Int64
	ModifiedAt field.Int64
	DeletedAt  field.Int64
	CreatedBy  field.String
	ModifiedBy field.String
	DeletedBy  field.String
	Name       field.String
	Level      field.String
	Category   field.String
	Year       field.String
	SourceType field.String
	URL        field.String

	fieldMap map[string]field.Expr
}

func (j jlptBook) Table(newTableName string) *jlptBook {
	j.jlptBookDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jlptBook) As(alias string) *jlptBook {
	j.jlptBookDo.DO = *(j.jlptBookDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jlptBook) updateTableName(table string) *jlptBook {
	j.ALL = field.NewAsterisk(table)
	j.JlptBookID = field.NewString(table, "jlpt_book_id")
	j.CreatedAt = field.NewInt64(table, "created_at")
	j.ModifiedAt = field.NewInt64(table, "modified_at")
	j.DeletedAt = field.NewInt64(table, "deleted_at")
	j.CreatedBy = field.NewString(table, "created_by")
	j.ModifiedBy = field.NewString(table, "modified_by")
	j.DeletedBy = field.NewString(table, "deleted_by")
	j.Name = field.NewString(table, "name")
	j.Level = field.NewString(table, "level")
	j.Category = field.NewString(table, "category")
	j.Year = field.NewString(table, "year")
	j.SourceType = field.NewString(table, "source_type")
	j.URL = field.NewString(table, "url")

	j.fillFieldMap()

	return j
}

func (j *jlptBook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jlptBook) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 13)
	j.fieldMap["jlpt_book_id"] = j.JlptBookID
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["modified_at"] = j.ModifiedAt
	j.fieldMap["deleted_at"] = j.DeletedAt
	j.fieldMap["created_by"] = j.CreatedBy
	j.fieldMap["modified_by"] = j.ModifiedBy
	j.fieldMap["deleted_by"] = j.DeletedBy
	j.fieldMap["name"] = j.Name
	j.fieldMap["level"] = j.Level
	j.fieldMap["category"] = j.Category
	j.fieldMap["year"] = j.Year
	j.fieldMap["source_type"] = j.SourceType
	j.fieldMap["url"] = j.URL
}

func (j jlptBook) clone(db *gorm.DB) jlptBook {
	j.jlptBookDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jlptBook) replaceDB(db *gorm.DB) jlptBook {
	j.jlptBookDo.ReplaceDB(db)
	return j
}

type jlptBookDo struct{ gen.DO }

type IJlptBookDo interface {
	gen.SubQuery
	Debug() IJlptBookDo
	WithContext(ctx context.Context) IJlptBookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJlptBookDo
	WriteDB() IJlptBookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJlptBookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJlptBookDo
	Not(conds ...gen.Condition) IJlptBookDo
	Or(conds ...gen.Condition) IJlptBookDo
	Select(conds ...field.Expr) IJlptBookDo
	Where(conds ...gen.Condition) IJlptBookDo
	Order(conds ...field.Expr) IJlptBookDo
	Distinct(cols ...field.Expr) IJlptBookDo
	Omit(cols ...field.Expr) IJlptBookDo
	Join(table schema.Tabler, on ...field.Expr) IJlptBookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJlptBookDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJlptBookDo
	Group(cols ...field.Expr) IJlptBookDo
	Having(conds ...gen.Condition) IJlptBookDo
	Limit(limit int) IJlptBookDo
	Offset(offset int) IJlptBookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJlptBookDo
	Unscoped() IJlptBookDo
	Create(values ...*model.JlptBook) error
	CreateInBatches(values []*model.JlptBook, batchSize int) error
	Save(values ...*model.JlptBook) error
	First() (*model.JlptBook, error)
	Take() (*model.JlptBook, error)
	Last() (*model.JlptBook, error)
	Find() ([]*model.JlptBook, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JlptBook, err error)
	FindInBatches(result *[]*model.JlptBook, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JlptBook) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJlptBookDo
	Assign(attrs ...field.AssignExpr) IJlptBookDo
	Joins(fields ...field.RelationField) IJlptBookDo
	Preload(fields ...field.RelationField) IJlptBookDo
	FirstOrInit() (*model.JlptBook, error)
	FirstOrCreate() (*model.JlptBook, error)
	FindByPage(offset int, limit int) (result []*model.JlptBook, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJlptBookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jlptBookDo) Debug() IJlptBookDo {
	return j.withDO(j.DO.Debug())
}

func (j jlptBookDo) WithContext(ctx context.Context) IJlptBookDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jlptBookDo) ReadDB() IJlptBookDo {
	return j.Clauses(dbresolver.Read)
}

func (j jlptBookDo) WriteDB() IJlptBookDo {
	return j.Clauses(dbresolver.Write)
}

func (j jlptBookDo) Session(config *gorm.Session) IJlptBookDo {
	return j.withDO(j.DO.Session(config))
}

func (j jlptBookDo) Clauses(conds ...clause.Expression) IJlptBookDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jlptBookDo) Returning(value interface{}, columns ...string) IJlptBookDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jlptBookDo) Not(conds ...gen.Condition) IJlptBookDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jlptBookDo) Or(conds ...gen.Condition) IJlptBookDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jlptBookDo) Select(conds ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jlptBookDo) Where(conds ...gen.Condition) IJlptBookDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jlptBookDo) Order(conds ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jlptBookDo) Distinct(cols ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jlptBookDo) Omit(cols ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jlptBookDo) Join(table schema.Tabler, on ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jlptBookDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jlptBookDo) RightJoin(table schema.Tabler, on ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jlptBookDo) Group(cols ...field.Expr) IJlptBookDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jlptBookDo) Having(conds ...gen.Condition) IJlptBookDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jlptBookDo) Limit(limit int) IJlptBookDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jlptBookDo) Offset(offset int) IJlptBookDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jlptBookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJlptBookDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jlptBookDo) Unscoped() IJlptBookDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jlptBookDo) Create(values ...*model.JlptBook) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jlptBookDo) CreateInBatches(values []*model.JlptBook, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jlptBookDo) Save(values ...*model.JlptBook) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jlptBookDo) First() (*model.JlptBook, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JlptBook), nil
	}
}

func (j jlptBookDo) Take() (*model.JlptBook, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JlptBook), nil
	}
}

func (j jlptBookDo) Last() (*model.JlptBook, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JlptBook), nil
	}
}

func (j jlptBookDo) Find() ([]*model.JlptBook, error) {
	result, err := j.DO.Find()
	return result.([]*model.JlptBook), err
}

func (j jlptBookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JlptBook, err error) {
	buf := make([]*model.JlptBook, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jlptBookDo) FindInBatches(result *[]*model.JlptBook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jlptBookDo) Attrs(attrs ...field.AssignExpr) IJlptBookDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jlptBookDo) Assign(attrs ...field.AssignExpr) IJlptBookDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jlptBookDo) Joins(fields ...field.RelationField) IJlptBookDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jlptBookDo) Preload(fields ...field.RelationField) IJlptBookDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jlptBookDo) FirstOrInit() (*model.JlptBook, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JlptBook), nil
	}
}

func (j jlptBookDo) FirstOrCreate() (*model.JlptBook, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JlptBook), nil
	}
}

func (j jlptBookDo) FindByPage(offset int, limit int) (result []*model.JlptBook, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jlptBookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jlptBookDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jlptBookDo) Delete(models ...*model.JlptBook) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jlptBookDo) withDO(do gen.Dao) *jlptBookDo {
	j.DO = *do.(*gen.DO)
	return j
}
